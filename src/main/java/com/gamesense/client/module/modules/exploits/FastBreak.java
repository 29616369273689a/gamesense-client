package com.gamesense.client.module.modules.exploits;

import com.gamesense.api.event.Phase;
import com.gamesense.api.event.events.DamageBlockEvent;
import com.gamesense.api.event.events.OnUpdateWalkingPlayerEvent;
import com.gamesense.api.event.events.RenderEvent;
import com.gamesense.api.setting.values.BooleanSetting;
import com.gamesense.api.setting.values.ColorSetting;
import com.gamesense.api.setting.values.DoubleSetting;
import com.gamesense.api.setting.values.IntegerSetting;
import com.gamesense.api.setting.values.ModeSetting;
import com.gamesense.api.util.player.InventoryUtil;
import com.gamesense.api.util.player.PlayerPacket;
import com.gamesense.api.util.player.RotationUtil;
import com.gamesense.api.util.render.GSColor;
import com.gamesense.api.util.render.RenderUtil;
import com.gamesense.api.util.world.BlockUtil;
import com.gamesense.client.manager.managers.PlayerPacketManager;
import com.gamesense.client.module.Category;
import com.gamesense.client.module.Module;
import com.gamesense.client.module.modules.combat.CevBreaker;
import com.gamesense.client.module.modules.combat.PistonCrystal;
import java.util.Arrays;
import java.util.function.Predicate;
import me.zero.alpine.listener.EventHandler;
import me.zero.alpine.listener.Listener;
import net.minecraft.block.Block;
import net.minecraft.block.BlockAir;
import net.minecraft.block.state.IBlockState;
import net.minecraft.client.Minecraft;
import net.minecraft.init.MobEffects;
import net.minecraft.item.Item;
import net.minecraft.item.ItemPickaxe;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerDigging.Action;
import net.minecraft.potion.PotionEffect;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec2f;
import net.minecraft.util.math.Vec3d;

@Module.Declaration(
   name = "FastBreak",
   category = Category.Exploits,
   priority = 250
)
public class FastBreak extends Module {
   ModeSetting mode = this.registerMode("Mode", Arrays.asList("Packet", "Damage", "Instant", "Breaker"), "Packet");
   DoubleSetting startDamage = this.registerDouble("Start Damage", 0.1D, 0.0D, 1.0D);
   DoubleSetting endDamage = this.registerDouble("End Damage", 0.9D, 0.0D, 1.0D);
   BooleanSetting haste = this.registerBoolean("Haste", false);
   BooleanSetting switchPick = this.registerBoolean("Switch Pick", false);
   BooleanSetting switchBack = this.registerBoolean("Switch Back", true);
   BooleanSetting spammer = this.registerBoolean("Spammer", false);
   BooleanSetting ignoreChecks = this.registerBoolean("Ignore Checks", false);
   BooleanSetting onlyOnPick = this.registerBoolean("Only On Pick", false);
   BooleanSetting startPick = this.registerBoolean("Start Pick", false);
   IntegerSetting resetTickDestroy = this.registerInteger("Tick Reset Destroy", 0, 0, 50);
   IntegerSetting pickTickSwitch = this.registerInteger("Pick Switch Destroy", 75, 0, 90);
   IntegerSetting pickStill = this.registerInteger("Pick Switch Still", 20, 0, 30);
   IntegerSetting spammerTickDelay = this.registerInteger("Spammer Delay", 0, 0, 75);
   IntegerSetting breakerTickDelay = this.registerInteger("Breaker Delay", 0, 0, 75);
   BooleanSetting forceRotation = this.registerBoolean("Force Rotation", false);
   IntegerSetting rangeDisableBreaker = this.registerInteger("Range Disable Breaker", 15, 6, 50);
   BooleanSetting display = this.registerBoolean("Display", false);
   ColorSetting blockColor = this.registerColor("Block Color", new GSColor(255, 0, 0));
   ColorSetting doneColor = this.registerColor("Done Color", new GSColor(0, 255, 0));
   ModeSetting renderMode = this.registerMode("Render", Arrays.asList("Outline", "Fill", "Both"), "Both");
   IntegerSetting width = this.registerInteger("Width", 1, 1, 10);
   BooleanSetting debugChat = this.registerBoolean("Debug Chat", false);
   private int tick = 99;
   private int tickSpammer = 0;
   private int oldslot;
   private int breakTick = 0;
   private int wait = 100;
   private BlockPos lastBlock = null;
   private boolean pickStillBol = false;
   private boolean ready = false;
   private EnumFacing direction;
   private boolean minedBefore = false;
   private int reseTick;
   private Vec3d lastHitVec = null;
   @EventHandler
   private final Listener<OnUpdateWalkingPlayerEvent> onUpdateWalkingPlayerEventListener = new Listener((event) -> {
      if (event.getPhase() == Phase.PRE && this.lastHitVec != null && (Boolean)this.forceRotation.getValue() && this.lastBlock != null) {
         Vec2f rotation = RotationUtil.getRotationTo(this.lastHitVec);
         PlayerPacket packet = new PlayerPacket(this, rotation);
         PlayerPacketManager.INSTANCE.addPacket(packet);
      }
   }, new Predicate[0]);
   @EventHandler
   private final Listener<DamageBlockEvent> listener = new Listener((event) -> {
      if (mc.field_71441_e != null && mc.field_71439_g != null) {
         if (this.canBreak(event.getBlockPos()) && event.getBlockPos() != null) {
            if (CevBreaker.forceBrk) {
               this.breakerAlgo(event);
            } else {
               if ((Boolean)this.forceRotation.getValue()) {
                  this.setVec3d(event.getBlockPos(), event.getEnumFacing());
               }

               String var2 = (String)this.mode.getValue();
               byte var3 = -1;
               switch(var2.hashCode()) {
               case -1911998296:
                  if (var2.equals("Packet")) {
                     var3 = 0;
                  }
                  break;
               case -672743999:
                  if (var2.equals("Instant")) {
                     var3 = 2;
                  }
                  break;
               case 1805695436:
                  if (var2.equals("Breaker")) {
                     var3 = 3;
                  }
                  break;
               case 2039707535:
                  if (var2.equals("Damage")) {
                     var3 = 1;
                  }
               }

               switch(var3) {
               case 0:
                  mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
                  mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.START_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
                  mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.STOP_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
                  event.cancel();
                  this.lastBlock = event.getBlockPos();
                  this.oldslot = InventoryUtil.findFirstItemSlot(ItemPickaxe.class, 0, 9);
                  this.tick = 0;
                  this.wait = (Integer)this.pickTickSwitch.getValue();
                  this.ready = false;
                  this.pickStillBol = false;
                  break;
               case 1:
                  if ((double)mc.field_71442_b.field_78770_f < (Double)this.startDamage.getValue()) {
                     mc.field_71442_b.field_78770_f = ((Double)this.startDamage.getValue()).floatValue();
                  }

                  if ((double)mc.field_71442_b.field_78770_f >= (Double)this.endDamage.getValue()) {
                     mc.field_71442_b.field_78770_f = 1.0F;
                  }
                  break;
               case 2:
                  mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
                  mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.START_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
                  mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.STOP_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
                  mc.field_71442_b.func_187103_a(event.getBlockPos());
                  mc.field_71441_e.func_175698_g(event.getBlockPos());
                  break;
               case 3:
                  this.breakerAlgo(event);
               }

            }
         }
      }
   }, new Predicate[0]);

   public void onUpdate() {
      if (this.tick != 99 && this.tick++ >= this.wait) {
         int prev = mc.field_71439_g.field_71071_by.field_70461_c;
         this.ready = true;
         if ((Boolean)this.switchPick.getValue() && this.oldslot != -1) {
            mc.field_71439_g.field_71071_by.field_70461_c = this.oldslot;
            this.oldslot = -1;
         }

         if (!this.pickStillBol) {
            if ((Integer)this.pickTickSwitch.getValue() != 0 && (Boolean)this.switchPick.getValue()) {
               this.wait = (Integer)this.pickStill.getValue();
               this.tick = 0;
               this.oldslot = prev;
               this.pickStillBol = true;
            } else {
               this.tick = 99;
               mc.field_71439_g.field_71071_by.field_70461_c = prev;
            }
         } else {
            this.tick = 99;
         }
      }

      Minecraft.func_71410_x().field_71442_b.field_78781_i = 0;
      mc.field_71442_b.field_78781_i = 0;
      if ((Boolean)this.haste.getValue()) {
         PotionEffect effect = new PotionEffect(MobEffects.field_76422_e, 80950, 1, false, false);
         mc.field_71439_g.func_70690_d(new PotionEffect(effect));
      }

      if (!(Boolean)this.haste.getValue() && mc.field_71439_g.func_70644_a(MobEffects.field_76422_e)) {
         mc.field_71439_g.func_184589_d(MobEffects.field_76422_e);
      }

      if ((!(Boolean)this.onlyOnPick.getValue() || mc.field_71439_g.func_184614_ca().func_77973_b() instanceof ItemPickaxe) && (((String)this.mode.getValue()).equals("Breaker") && !CevBreaker.isPossible || CevBreaker.forceBrk) && this.lastBlock != null && (Boolean)this.spammer.getValue() && this.tickSpammer++ >= (Integer)this.spammerTickDelay.getValue()) {
         this.tickSpammer = 0;
         if (BlockUtil.getBlock(this.lastBlock) instanceof BlockAir) {
            this.minedBefore = true;
            this.reseTick = 0;
            this.lastHitVec = null;
         }

         if (this.minedBefore) {
            if ((Integer)this.resetTickDestroy.getValue() != 0 && this.reseTick++ >= (Integer)this.resetTickDestroy.getValue() && !(BlockUtil.getBlock(this.lastBlock) instanceof BlockAir)) {
               mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.START_DESTROY_BLOCK, this.lastBlock, this.direction));
               this.breakerBreak();
               this.reseTick = 0;
               this.minedBefore = false;
               if ((Boolean)this.debugChat.getValue()) {
                  PistonCrystal.printDebug("Reset Block", false);
               }

               return;
            }

            if ((Boolean)this.ignoreChecks.getValue() || !(BlockUtil.getBlock(this.lastBlock) instanceof BlockAir)) {
               if ((Boolean)this.forceRotation.getValue()) {
                  this.setVec3d(this.lastBlock, this.direction);
               }

               if (mc.field_71439_g.func_174818_b(this.lastBlock) >= (double)(Integer)this.rangeDisableBreaker.getValue()) {
                  this.lastBlock = null;
               } else {
                  this.breakerBreak();
               }
            }
         }
      }

   }

   private void breakerBreak() {
      Item item = mc.field_71439_g.field_71071_by.func_70448_g().func_77973_b();
      int oldSlot = -1;
      if (!(item instanceof ItemPickaxe) && this.minedBefore && ((Boolean)this.switchBack.getValue() || (Boolean)this.switchPick.getValue())) {
         oldSlot = mc.field_71439_g.field_71071_by.field_70461_c;
         int slot = InventoryUtil.findFirstItemSlot(ItemPickaxe.class, 0, 9);
         if (slot != -1) {
            mc.field_71439_g.field_71071_by.field_70461_c = slot;
         }
      }

      mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.STOP_DESTROY_BLOCK, this.lastBlock, this.direction));
      if (oldSlot != -1 && (Boolean)this.switchBack.getValue()) {
         this.tick = 0;
         this.oldslot = oldSlot;
         if (!this.minedBefore || ((String)this.mode.getValue()).equals("Packet") && !CevBreaker.forceBrk) {
            this.wait = (Integer)this.pickTickSwitch.getValue();
            this.pickStillBol = !(Boolean)this.switchBack.getValue();
         } else {
            this.wait = (Integer)this.pickStill.getValue();
         }
      }

   }

   private void setVec3d(BlockPos pos, EnumFacing side) {
      BlockPos neighbour = pos.func_177972_a(side);
      EnumFacing opposite = side.func_176734_d();
      this.lastHitVec = (new Vec3d(neighbour)).func_72441_c(0.5D, 0.5D, 0.5D).func_178787_e((new Vec3d(opposite.func_176730_m())).func_186678_a(0.5D));
   }

   private void breakerAlgo(DamageBlockEvent event) {
      if (this.lastBlock == null || event.getBlockPos().field_177962_a != this.lastBlock.field_177962_a || event.getBlockPos().field_177960_b != this.lastBlock.field_177960_b || event.getBlockPos().field_177961_c != this.lastBlock.field_177961_c) {
         if ((Boolean)this.startPick.getValue()) {
            int pick = InventoryUtil.findFirstItemSlot(ItemPickaxe.class, 0, 9);
            if (pick != -1) {
               mc.field_71439_g.field_71071_by.field_70461_c = pick;
            }
         }

         this.minedBefore = false;
         mc.field_71439_g.func_184609_a(EnumHand.MAIN_HAND);
         mc.field_71439_g.field_71174_a.func_147297_a(new CPacketPlayerDigging(Action.START_DESTROY_BLOCK, event.getBlockPos(), event.getEnumFacing()));
         this.lastBlock = event.getBlockPos();
         this.direction = event.getEnumFacing();
      }

      if ((Integer)this.breakerTickDelay.getValue() <= this.breakTick++) {
         this.breakerBreak();
         event.cancel();
         this.breakTick = 0;
      }

      this.wait = (Integer)this.pickTickSwitch.getValue();
      this.ready = false;
      this.tick = 0;
      if (!CevBreaker.isActive && (Boolean)this.switchPick.getValue()) {
         this.oldslot = InventoryUtil.findFirstItemSlot(ItemPickaxe.class, 0, 9);
         this.pickStillBol = !(Boolean)this.switchBack.getValue();
      }

   }

   private boolean canBreak(BlockPos pos) {
      IBlockState blockState = mc.field_71441_e.func_180495_p(pos);
      Block block = blockState.func_177230_c();
      return block.func_176195_g(blockState, mc.field_71441_e, pos) != -1.0F;
   }

   public void onDisable() {
      if ((Boolean)this.haste.getValue()) {
         mc.field_71439_g.func_184589_d(MobEffects.field_76422_e);
      }

      this.breakTick = 0;
   }

   public void onWorldRender(RenderEvent event) {
      if (this.lastBlock != null) {
         if (mc.field_71439_g.func_174818_b(this.lastBlock) >= (double)(Integer)this.rangeDisableBreaker.getValue()) {
            this.lastBlock = null;
         } else if ((Boolean)this.display.getValue()) {
            if (!((String)this.mode.getValue()).equals("Breaker") && !CevBreaker.forceBrk && (!((String)this.mode.getValue()).equals("Packet") || BlockUtil.getBlock(this.lastBlock) instanceof BlockAir) && !((String)this.mode.getValue()).equals("Packer")) {
               this.lastBlock = null;
            } else {
               this.renderBox(this.lastBlock);
            }
         }
      }

   }

   private void renderBox(BlockPos blockPos) {
      GSColor color = this.ready ? this.doneColor.getValue() : this.blockColor.getValue();
      GSColor gsColor1 = new GSColor(color, 255);
      GSColor gsColor2 = new GSColor(color, 50);
      String var5 = (String)this.renderMode.getValue();
      byte var6 = -1;
      switch(var5.hashCode()) {
      case 2076577:
         if (var5.equals("Both")) {
            var6 = 0;
         }
         break;
      case 2189731:
         if (var5.equals("Fill")) {
            var6 = 2;
         }
         break;
      case 558407714:
         if (var5.equals("Outline")) {
            var6 = 1;
         }
      }

      switch(var6) {
      case 0:
         RenderUtil.drawBox(blockPos, 1.0D, gsColor2, 63);
         RenderUtil.drawBoundingBox(blockPos, 1.0D, (float)(Integer)this.width.getValue(), gsColor1);
         break;
      case 1:
         RenderUtil.drawBoundingBox(blockPos, 1.0D, (float)(Integer)this.width.getValue(), gsColor1);
         break;
      case 2:
         RenderUtil.drawBox(blockPos, 1.0D, gsColor2, 63);
      }

   }
}
